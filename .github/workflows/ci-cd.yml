name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: storygen
  ECS_SERVICE: storygen-service
  ECS_CLUSTER: storygen-cluster
  CONTAINER_NAME: storygen-app

jobs:
  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-lock.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
          pip install black flake8 mypy pytest pytest-cov bandit safety
          
      - name: Run Black formatter
        run: black --check .
        
      - name: Run Flake8 linter
        run: flake8 . --config=.flake8
        
      - name: Run MyPy type checker
        run: mypy . --config-file=mypy.ini
        
      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json
        
      - name: Check dependencies for vulnerabilities
        run: safety check --json
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Python tests
  python-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock
          
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=pytest-report.xml \
            -v
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pytest-results
          path: |
            pytest-report.xml
            htmlcov/
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run TypeScript checks
        working-directory: ./frontend
        run: npm run type-check
        
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:ci
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
            
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Deploy to ECS Staging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update task definition with new image
          aws ecs describe-task-definition \
            --task-definition storygen-staging \
            --query 'taskDefinition' > task-def.json
            
          # Update the image in task definition
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' task-def.json > updated-task-def.json
            
          # Register new task definition
          aws ecs register-task-definition --cli-input-json file://updated-task-def.json
          
          # Update service with new task definition
          aws ecs update-service \
            --cluster storygen-staging-cluster \
            --service storygen-staging-service \
            --force-new-deployment
            
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster storygen-staging-cluster \
            --services storygen-staging-service
            
      - name: Run smoke tests
        run: |
          STAGING_URL=$(aws elbv2 describe-load-balancers \
            --names storygen-staging-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
            
          # Health check
          curl -f https://$STAGING_URL/health || exit 1
          
          # API smoke test
          curl -f -X POST https://$STAGING_URL/api/generate-story \
            -H "Content-Type: application/json" \
            -d '{"core_idea": "Test story", "style": "short_post"}' || exit 1

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Create deployment backup
        run: |
          # Create backup of current task definition
          aws ecs describe-task-definition \
            --task-definition storygen-production \
            --query 'taskDefinition' > backup-task-def-$(date +%Y%m%d-%H%M%S).json
            
          # Upload to S3
          aws s3 cp backup-task-def-*.json s3://storygen-backups/deployments/
          
      - name: Deploy to ECS Production (Blue/Green)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create new task definition revision
          aws ecs describe-task-definition \
            --task-definition storygen-production \
            --query 'taskDefinition' > task-def.json
            
          # Update the image
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' task-def.json > updated-task-def.json
            
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
          # Create CodeDeploy deployment for blue/green
          aws deploy create-deployment \
            --application-name storygen-app \
            --deployment-group-name storygen-prod-dg \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnceBlueGreen \
            --description "Deployment of $IMAGE_TAG to production"
            
      - name: Monitor deployment
        run: |
          # Wait for deployment to complete
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name storygen-app \
            --deployment-group-name storygen-prod-dg \
            --query 'deployments[0]' \
            --output text)
            
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
      - name: Run production smoke tests
        run: |
          PROD_URL=$(aws elbv2 describe-load-balancers \
            --names storygen-production-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
            
          # Comprehensive health checks
          ./scripts/production-smoke-tests.sh $PROD_URL
          
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Automated rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Rollback deployment
        run: |
          # Stop the failed deployment
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name storygen-app \
            --deployment-group-name storygen-prod-dg \
            --query 'deployments[0]' \
            --output text)
            
          aws deploy stop-deployment \
            --deployment-id $DEPLOYMENT_ID \
            --auto-rollback-enabled
            
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "⚠️ Production deployment failed and was rolled back",
              "color": "danger",
              "fields": [
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "Author",
                  "value": "${{ github.actor }}",
                  "short": true
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}